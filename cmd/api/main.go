package main

import (
	"context"
	"database/sql"
	"flag"
	"fmt"
	"log"
	"log/slog"
	"net/http"
	"os"
	"time"

	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
)

// static version number, this will be autogenerated later
const version = "1.0.0"

// config options struct, this will use cli flags later
type config struct {
	port int
	env  string
	db   struct {
		dsn string
	}
}

// app struct for dep injection across the app
type application struct {
	config config
	logger *slog.Logger
}

func main() {
	// declare an instance of config to use in our app
	var cfg config

	err := godotenv.Load()
	if err != nil {
		log.Fatalf("Error loading .env file")
	}

	// read the cli flags into the config struct
	// the 8080 port deviates from the 4000 port used in book
	flag.IntVar(&cfg.port, "port", 8080, "API server port")
	// the "testing" value deviates from "staging", as "testing" is more common here
	flag.StringVar(&cfg.env, "env", "development", "Environment (development|testing|production)")
	// read dsn value cli flag, or use default when none are provided
	flag.StringVar(&cfg.db.dsn, "db-dsn", os.Getenv("GREENLIGHT_DB_DSN"), "PostgreSQL DSN")
	flag.Parse()

	// init logger
	logger := slog.New(slog.NewTextHandler(os.Stdout, nil))

	// init db by opening with cfg using helper
	db, err := openDB(cfg)
	if err != nil {
		logger.Error(err.Error())
		os.Exit(1)
	}

	defer db.Close()

	// log success
	logger.Info("db connection pool established")

	// declare app object and pass in it's properties
	app := &application{
		config: cfg,
		logger: logger,
	}

	// decalare servemux and healthcheck route
	mux := http.NewServeMux()
	mux.HandleFunc("/v1/healthcheck", app.healthcheckHandler)

	// declare server
	srv := &http.Server{
		Addr:         fmt.Sprintf(":%d", cfg.port),
		Handler:      app.routes(),
		IdleTimeout:  time.Minute,
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 10 * time.Second,
		ErrorLog:     slog.NewLogLogger(logger.Handler(), slog.LevelError),
	}

	// start server and logging
	logger.Info("starting server", "addr", srv.Addr, "env", cfg.env)
	err = srv.ListenAndServe()
	logger.Error(err.Error())
	os.Exit(1)
}

func openDB(cfg config) (*sql.DB, error) {
	// use sql open to make an empty connection pool
	db, err := sql.Open("postgres", cfg.db.dsn)
	if err != nil {
		return nil, err
	}

	// create context with 5 second timeout
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// ping context creates a connection to the db
	// throws error if not within 5 second timeout
	err = db.PingContext(ctx)
	if err != nil {
		db.Close()
		return nil, err
	}

	// success
	return db, nil
}
